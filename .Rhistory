install_github("Jonnathan-Landi/data.QC")
library(devtools)
install_github("Jonnathan-Landi/data.QC")
################################################################################
# Autor: Jonnathan Landi
# Correo: jonnathana.landi@ucuenca.edu.ec / jonnathan.landi@outlook.com
# Versión: 1.8.6 (Beta)
library(devtools)
github_install("Jonnathan-Landi/data.QC")
################################################################################
# Autor: Jonnathan Landi
# Correo: jonnathana.landi@ucuenca.edu.ec / jonnathan.landi@outlook.com
# Versión: 1.8.6 (Beta)
library(devtools)
install_github("Jonnathan-Landi/data.QC")
library(data.QC)
library(data.QC)
install.packages("reoxygen")
library(reoxygen)
install.packages('roxygen2')
devtools::document()
library(roxygen2)
roxygen2::roxygenise("C:/Github/data.QC")
library(remotes)
remotes::install_github("Jonnathan-Landi/data.QC")
remotes::install_github("Jonnathan-Landi/data.QC")
library(data.QC)
devtools::use_vignette("Documentation", "data.QC")
use_vignette("Documentation", "data.QC")
library(data.QC)
limites_duros(dt, variable_analizada, LimInf, LimSup)
library(data.QC)
library(data.QC)
library(data.table)
dt <- data.table(Temp = c(15, 22, 30, NA, 45))
# Aplicar la función con límites de 20 y 35
result <- limites_duros(dt, "Temp", 20, 35)
# Mostrar el resultado
print(result)
result
ft = fread("C:/Users/Jonna/Desktop/PCCM_Datos procesados/CebollarPTAPM/CSV_Datos_horarios/Lluvia_Tot/CebollarPTAPM.csv")
resuls = limites_duros(ft, "Lluvia_Tot", 0, 11)
resuls
resuls
hard_limits = function(dt, variable_analyzed, LimInf, LimSup) {
dt_hard_limits = dt[, Flag_LimDuros := fifelse(is.na(get(variable_analyzed)), "ND",
fifelse(get(variable_analyzed) >= LimInf &
get(variable_analyzed) <= LimSup, "C", "M"))]
#dt_limtsDuros[, (variable_analyzed) := NULL]
return(dt_hard_limits)
}
library(roxygen2)
library(devtools)
library(remotes)
devtools::install_github("Jonnathan-Landi/data.QC")
library(data.QC)
step_test = function(dt, variable_analyzed, lags, thresholds) {
dt_step = copy(dt)
col_names = paste0("diff_h-", lags)
for (lag in lags) {
dt_step[, paste0("diff_h-", lag) := {
diff_value <- abs(get(variable_analyzed) - shift(get(variable_analyzed), n = lag, type = "lag"))
ifelse(is.na(get(variable_analyzed)), "ND", diff_value)
}]
}
bandera_paso = paste0("Paso_", lags)
for (i in seq_along(lags)) {
dt_step[, (bandera_paso[i]) := {
# Asignar banderas basadas en la diferencia y el umbral
diff_col <- get(col_names[i])
ifelse(is.na(diff_col), "ND", ifelse(diff_col <= umbrales[i], "C", "D"))
}]
}
# elimino columnas temporaltes
#  dt_step[, c((col_names), (variable_analizada)) := NULL]
return(dt_step)
}
library(data.table)
dt <- data.table(Var1 = c(NA, 5, 15, 25, 35))
lags <- c(1, 2)
thresholds <- c(5, 10)
result <- step_test(dt, "Var1", lags, thresholds)
step_test = function(dt, variable_analyzed, lags, thresholds) {
dt_step = copy(dt)
col_names = paste0("diff_h-", lags)
for (lag in lags) {
dt_step[, paste0("diff_h-", lag) := {
diff_value <- abs(get(variable_analyzed) - shift(get(variable_analyzed), n = lag, type = "lag"))
ifelse(is.na(get(variable_analyzed)), "ND", diff_value)
}]
}
bandera_paso = paste0("Paso_", lags)
for (i in seq_along(lags)) {
dt_step[, (bandera_paso[i]) := {
# Asignar banderas basadas en la diferencia y el umbral
diff_col <- get(col_names[i])
ifelse(is.na(diff_col), "ND", ifelse(diff_col <= thresholds[i], "C", "D"))
}]
}
# elimino columnas temporaltes
#  dt_step[, c((col_names), (variable_analizada)) := NULL]
return(dt_step)
}
library(data.table)
dt <- data.table(Var1 = c(NA, 5, 15, 25, 35))
lags <- c(1, 2)
thresholds <- c(5, 10)
result <- step_test(dt, "Var1", lags, thresholds)
print(result)
result
step_test = function(dt, variable_analyzed, lags, thresholds) {
dt_step = copy(dt)
col_names = paste0("diff_h-", lags)
for (lag in lags) {
dt_step[, paste0("diff_h-", lag) := {
diff_value <- abs(get(variable_analyzed) - shift(get(variable_analyzed), n = lag, type = "lag"))
ifelse(is.na(get(variable_analyzed)), "ND", diff_value)
}]
}
bandera_paso = paste0("Paso_", lags)
for (i in seq_along(lags)) {
dt_step[, (bandera_paso[i]) := {
# Asignar banderas basadas en la diferencia y el umbral
diff_col <- get(col_names[i])
ifelse(is.na(diff_col), "ND", ifelse(diff_col <= thresholds[i], "C", "D"))
}]
}
# elimino columnas temporaltes
#  dt_step[, c((col_names), (variable_analizada)) := NULL]
dt_step[, (col_names) := NULL]
return(dt_step)
}
library(data.table)
dt <- data.table(Var1 = c(NA, 5, 15, 25, 35))
lags <- c(1, 2)
thresholds <- c(5, 10)
result <- step_test(dt, "Var1", lags, thresholds)
result <- step_test(dt, "Var1", lags, thresholds)
result
result
devtools::install_github("Jonnathan-Landi/data.QC")
devtools::install_github("Jonnathan-Landi/data.QC")
detach("package:data.QC", unload = TRUE)
devtools::install_github("Jonnathan-Landi/data.QC")
library(devtoolds)
library(devtools)
install_github("Jonnathan-Landi/data.QC")
library(data.QC)
library(data.QC)
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
)
librayr(data.table)
library(data.table)
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
)
# Apply the coherence test
result <- coherence_test(dt, "TempAire_Avg", 5)
# Apply the coherence test
result <- data.QC::coherence_test(dt, "TempAire_Avg", 5)
library(data.QC)
library(data.table)
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
)
# Apply the coherence test
result <- data.QC::coherence_test(dt, "TempAire_Avg", 5)
devtools::document()  # Regenera la documentación
devtools::install()   # Reinstala el paquete
library(data.QC)
library(data.table)
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
)
# Apply the coherence test
result <- data.QC::coherence_test(dt, "TempAire_Avg", 5)
detach("package:data.QC", unload = TRUE)
library(devtools)
install_github("Jonnathan-Landi/data.QC")
persistence_test = function(dt, variable_analyzed, n_persistence) {
dt_persistence = copy(dt)
col_names = paste0(variable_analyzed, "_lag", 1:n_persistence)
# Crear columnas de desfase
for (i in 1:n_persistence) {
dt_persistence[, (col_names[i]) := shift(get(variable_analyzed), n = i, type = "lag")]
}
# Determinar si la variable analizada es radiación solar
radiation_variable = (variable_analyzed == "RS_W_Avg")
all_equal = function(row) {
if (any(is.na(row))) {
return(FALSE)  # Retorna FALSE si hay algún NA en la fila
}
length(unique(row)) == 1  # Verificar si todos los valores no NA son iguales
}
if (radiation_variable == TRUE){
dt_persistence[, all_equal := apply(.SD, 1, all_equal), .SDcols = setdiff(names(dt_persistence), "TIMESTAMP")]
dt_persistence[, hour := hour(TIMESTAMP)]
dt_persistence[, overnight := hour <= 5 | hour >= 18]
dt_persistence[, hour := NULL]
dt_persistence[, Persistence_flag := fifelse(is.na(get(variable_analyzed)), "ND",
fifelse(overnight, "ND",
fifelse(all_equal, "D", "C")))]
inds = which(dt_persistence$Persistence_flag == "D")
secuencias = unlist(lapply(inds, function(indice) {
if (indice > n_persistence) {
return((indice - n_persistence):(indice - 1))
} else {
return(integer(0))  # Retornar un vector vacío si el índice no permite una secuencia completa
}
}))
if (length(inds) > 0) {
dt_persistence[secuencias, Persistence_flag := "D"]
}
dt_persistence[, c((col_names), (variable_analyzed)) := NULL]
dt_persistence[, overnight := NULL]
dt_persistence[, all_equal := NULL]
} else {
# Aplicar la función a cada fila
dt_persistence[, all_equal := apply(.SD, 1, all_equal), .SDcols = setdiff(names(dt_persistence), "TIMESTAMP")]
dt_persistence[, Persistence_flag := fifelse(is.na(get(variable_analyzed)), "ND",
fifelse(all_equal, "D", "C"))]
inds = which(dt_persistence$Persistence_flag == "D")
if (length(inds) > 0) {
secuencias = unlist(lapply(inds, function(indice) {
if (indice > n_persistence) {
return((indice - n_persistence):(indice - 1))
} else {
return(integer(0))  # Retornar un vector vacío si el índice no permite una secuencia completa
}
}))
dt_persistence[secuencias, Persistence_flag := "D"]
}
dt_persistence[, c((col_names), (variable_analyzed)) := NULL]
dt_persistence[, all_equal := NULL]
} # cierro el else.
return(dt_persistence)
}
library(data.table)
library(lubridate)
library(data.QC)
# Create an example data.table
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 20, 20, 20, 21, 22, 23, 24, 25, 25, 25, 25, 25)
)
# Apply the persistence test
result <- persistence_test(dt, "TempAire_Avg", 3)
print(result)
result
library(data.QC)
library(data.QC)
library(data.table)
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
)
# Apply the coherence test
result <- data.QC::coherence_test(dt, "TempAire_Avg", 5)
library(data.QC)
library(data.table)
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
)
# Apply the coherence test
result <- data.QC::coherence_test(dt, "TempAire_Avg", 5)
detach("package:data.QC", unload = TRUE)
library(devtools)
install_github("Jonnathan-Landi/data.QC")
library(data.QC)
library(data.table)
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
)
# Apply the coherence test
result <- data.QC::coherence_test(dt, "TempAire_Avg", 5)
detach("package:data.QC", unload = TRUE)
library(devtools)
install_github("Jonnathan-Landi/data.QC")
library(data.QC)
library(data.table)
dt <- data.table(
TIMESTAMP = seq.POSIXt(from = as.POSIXct("2024-01-01 00:00"),
to = as.POSIXct("2024-01-01 12:00"), by = "hour"),
TempAire_Avg = c(20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
)
# Apply the coherence test
result <- data.QC::coherence_test(dt, "TempAire_Avg", 5)
print(result)
result
